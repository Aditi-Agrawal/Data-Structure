Time limit exceeded 

class Solution {

    private int n, m;
    private Integer[][] memo;


    public int maximumScore(int[] nums, int[] muls) {
        n = nums.length;
        m = muls.length;
        this.memo = new Integer[n][n];
        return dp(0, n-1, nums, muls, 0);
    }

    private int dp(int l, int r,int[] nums, int[] muls, int i) {
        if (i == m) return 0;

        if (memo[l][r] != null) return memo[l][r];

        int pickLeft = dp(l+1, r, nums, muls, i+1) + nums[l] * muls[i];
        int pickRight = dp(l, r-1, nums, muls, i+1) + nums[r] * muls[i];

        return memo[l][r] = Math.max(pickLeft, pickRight);
    }
}

Final answer

class Solution {
    private int n, m;
    private Integer[][] memo;


    public int maximumScore(int[] nums, int[] muls) {
        n = nums.length;
        m = muls.length;

        this.memo = new Integer[m][m];
        return dp(0, 0, nums, muls);
    }
    private int dp(int l, int i,int[] nums, int[] muls) {
        if (i == m) return 0; // Picked enough m elements
        if (memo[l][i] != null) return memo[l][i];
        int pickLeft = dp(l+1, i+1, nums, muls) + nums[l] * muls[i];
        int pickRight = dp(l, i+1, nums, muls) + nums[n-(i-l)-1] * muls[i];
        return memo[l][i] = Math.max(pickLeft, pickRight);
    }
}
